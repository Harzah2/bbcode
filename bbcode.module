<?php

function bbcode_system($field) {
  $system["description"] = t("Use bbcode in your posts.");
  return $system[$field];
}

function bbcode_compose_tips() {
  return array(bbcode_help("compose_tips"));
}

function bbcode_help($type) {
  switch ($type) {
    case "compose_tips":
    default:
      return "This site lets you use bbcode to format your posts. This is easier to use than HTML. For a full guide, please <a href=\"http://www.icehousedesigns.com/community/faq.php?mode=bbcode\">look here</a>.";
  }
}

function bbcode_filter($body) {
  $rnd = substr(md5($body.time()), 0, 4);

  // convert bare urls into bbcode tags as best we can
  // the haystack has to have a space in front of it for the preg to work.
  $body = preg_replace("/([^='\"(\[url\]|\[img\])])((http|https|ftp):\/\/[a-z0-9;\/\?:@=\&\$\-_\.\+!*'\(\),~%#]+)/i", "$1<$rnd>$2</$rnd>", " $body");

  // strip punctuation from urls
  if(preg_match_all("/<$rnd>(.+?)<\/$rnd>/i", $body, $match)) {
    $urls = array_unique($match[1]);

    foreach($urls as $key => $url) {

      // stip punctuation from urls
      if(preg_match("|[^a-z0-9=&/\+_]+$|", $url, $match)) {

        $url = substr($url, 0, -1 * (strlen($match[0])));

        // if the stripped url is the same as an exisiting url, keep going
        if(in_array($url, $urls)) {
          continue;
        }
      }
      $body = str_replace("<$rnd>$url</$rnd>", "[url]{$url}[/url]", $body);

    }

  }

  // no sense doing any of this if there is no [ in the body
  if(strstr($body, "[")) {

    // convert bare email addresses into bbcode tags as best we can.
    $body = preg_replace("/([a-z0-9][a-z0-9\-_\.\+]+@[a-z0-9\-]+\.[a-z0-9\-\.]+[a-z0-9])/i", "[email]$1[/email]", $body);

    // clean up any BB code we stepped on.
    $body = str_replace("[email][email]", "[email]", $body);
    $body = str_replace("[/email][/email]", "[/email]", $body);

    // replace url/link items
    $body = preg_replace("/\[img\]((http|https|ftp):\/\/[a-z0-9;\/\?:@=\&\$\-_\.\+!*'\(\),~%#]+?)\[\/img\]/i", "<img src=\"$1\" />", $body);
    $body = preg_replace("/\[url\]((http|https|ftp|mailto):\/\/[a-z0-9;\/\?:@=\&\$\-_\.\+!*'\(\),~%#]+?)\[\/url\]/i", "<a href=\"$1\">$1</a>", $body);
    $body = preg_replace("/\[url=((http|https|ftp|mailto):\/\/[a-z0-9;\/\?:@=\&\$\-_\.\+!*'\(\),~%#]+?)\](.+?)\[\/url\]/i", "<a href=\"$1\">$3</a>", $body);
    $body = preg_replace("/\[email\]([a-z0-9\-_\.\+]+@[a-z0-9\-]+\.[a-z0-9\-\.]+?)\[\/email\]/ei", "'<a href=\"mailto:$1\">$1</a>'", $body);

    // font replacements
    $body = preg_replace("/\[color=([\#a-z0-9]+?)\]/i", "<span style=\"color: $1\">", $body);
    $body = preg_replace("/\[size=([+\-\da-z]+?)\]/i", "<span style=\"font-size: $1\">", $body);
    $body = preg_replace("/\[\/(color|size)\]/i", "</span>", $body);

    // fiddle with white space around quote and code tags.
    $body = preg_replace("/\s*(\[\/*(code|quote)\])\s*/", "$1", $body);

    // replace simple tag replacements
    $search = array("[b]",
                    "[/b]",
                    "[u]",
                    "[/u]",
                    "[i]",
                    "[/i]",
                    "[center]",
                    "[/center]",
                    "[code]",
                    "[/code]",
                    "[quote]",
                    "[/quote]",
                    "[hr]"
                    );

    $replace = array("<strong>",
                     "</strong>",
                     "<u>",
                     "</u>",
                     "<i>",
                     "</i>",
                     "<center>",
                     "</center>",
                     "<xmp>",
                     "</xmp>",
                     "<blockquote>",
                     "</blockquote>",
                     "<hr>"
                     );

    $body = str_replace($search, $replace, $body);
  }
  return $body;
}

?>
